name: Deploy to Azure Resource Group

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to deploy (e.g., 1.0.0)'
        required: true
        type: string
      resource_group:
        description: 'Azure Resource Group name'
        required: true
        type: string
      subscription_id:
        description: 'Azure Subscription ID'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
      policy_effect:
        description: 'Policy effect for all policies'
        required: false
        default: 'Audit'
        type: choice
        options:
          - Audit
          - Deny
          - Disabled
      dry_run:
        description: 'Perform dry run (terraform plan only)'
        required: false
        default: false
        type: boolean

env:
  PACKAGE_NAME: terraform-azure-policy-checkov
  TF_VERSION: '1.13.1'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.validate.outputs.download_url }}
      deployment_name: ${{ steps.validate.outputs.deployment_name }}

    steps:
      - name: Validate inputs and get download URL
        id: validate
        run: |
          # shellcheck disable=SC2086
          # Validate version format
          if ! echo "${{ github.event.inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "‚ùå Invalid version format. Use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi

          # Validate resource group name
          if ! echo "${{ github.event.inputs.resource_group }}" | grep -E '^[a-zA-Z0-9._-]+$'; then
            echo "‚ùå Invalid resource group name"
            exit 1
          fi

          # Validate subscription ID format
          if ! echo "${{ github.event.inputs.subscription_id }}" | grep -E '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'; then
            echo "‚ùå Invalid subscription ID format"
            exit 1
          fi

          # Set download URL
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/${{ env.PACKAGE_NAME }}-${{ github.event.inputs.version }}.tar.gz"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

          # Generate deployment name
          DEPLOYMENT_NAME="policy-deploy-$(date +%Y%m%d-%H%M%S)"
          echo "deployment_name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT

          echo "‚úÖ Inputs validated"
          echo "üì¶ Package URL: $DOWNLOAD_URL"
          echo "üè∑Ô∏è Deployment: $DEPLOYMENT_NAME"

  deploy:
    runs-on: ubuntu-latest
    needs: validate-inputs
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download and extract package
        run: |
          echo "üì¶ Downloading package version ${{ github.event.inputs.version }}"
          curl -L -o package.tar.gz "${{ needs.validate-inputs.outputs.download_url }}"

          # Verify download
          if [ ! -f package.tar.gz ]; then
            echo "‚ùå Failed to download package"
            exit 1
          fi

          # Extract package
          mkdir -p deployment
          tar -xzf package.tar.gz -C deployment

          echo "‚úÖ Package extracted successfully"
          echo "üìã Package contents:"
          ls -la deployment/

      - name: Verify package integrity
        run: |
          cd deployment

          # Check required files
          REQUIRED_FILES=("policies" "modules" "deployment.yml" "VERSION")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -e "$file" ]; then
              echo "‚ùå Missing required file/directory: $file"
              exit 1
            fi
          done

          # Verify versions match
          PACKAGE_VERSION=$(cat VERSION)
          if [ "$PACKAGE_VERSION" != "${{ github.event.inputs.version }}" ]; then
            echo "‚ùå Version mismatch. Package: $PACKAGE_VERSION, Requested: ${{ github.event.inputs.version }}"
            exit 1
          fi

          echo "‚úÖ Package integrity verified"

      - name: Create terraform.tfvars
        run: |
          # shellcheck disable=SC2086,SC2129
          cd deployment/policies

          cat << EOF > terraform.tfvars
          # Deployment Configuration - Generated by GitHub Actions
          # Version: ${{ github.event.inputs.version }}
          # Environment: ${{ github.event.inputs.environment }}
          # Deployed: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          # Azure Configuration
          subscription_id     = "${{ github.event.inputs.subscription_id }}"
          assignment_scope_id = "/subscriptions/${{ github.event.inputs.subscription_id }}/resourceGroups/${{ github.event.inputs.resource_group }}"
          assignment_location = "East US"

          # Deployment Settings
          environment        = "${{ github.event.inputs.environment }}"
          owner             = "GitHub-Actions"
          create_assignments = true

          # Policy Effects (Global Override)
          storage_policy_effect                   = "${{ github.event.inputs.policy_effect }}"
          storage_softdelete_policy_effect        = "${{ github.event.inputs.policy_effect }}"
          storage_versioning_policy_effect        = "${{ github.event.inputs.policy_effect }}"
          storage_https_policy_effect             = "${{ github.event.inputs.policy_effect }}"
          network_policy_effect                   = "${{ github.event.inputs.policy_effect }}"
          function_app_policy_effect              = "${{ github.event.inputs.policy_effect }}"
          function_app_https_policy_effect        = "${{ github.event.inputs.policy_effect }}"
          app_service_policy_effect               = "${{ github.event.inputs.policy_effect }}"

          # Storage Policy Configuration
          storage_softdelete_retention_days = 30

          # Network Policy Exemptions
          # Add any resource-specific exemptions here

          # Function App Policy Exemptions
          # Add any function app exemptions here

          # App Service Policy Configuration
          app_service_required_sku_tiers = ["PremiumV2", "PremiumV3", "PremiumV4", "IsolatedV2"]
          app_service_minimum_instance_count = 2
          EOF

          echo "‚úÖ Terraform variables file created"

      - name: Initialize Terraform
        run: |
          cd deployment/policies
          terraform init
          echo "‚úÖ Terraform initialized"

      - name: Validate Terraform Configuration
        run: |
          cd deployment/policies
          terraform validate
          echo "‚úÖ Terraform configuration validated"

      - name: Plan Terraform Deployment
        id: plan
        run: |
          cd deployment/policies

          echo "üìã Planning deployment to Resource Group: ${{ github.event.inputs.resource_group }}"

          terraform plan \
            -var-file=terraform.tfvars \
            -out=deployment.tfplan \
            -detailed-exitcode || EXIT_CODE=$?

          # Handle exit codes: 0 = no changes, 1 = error, 2 = changes planned
          case $EXIT_CODE in
            0)
              echo "plan_result=no-changes" >> $GITHUB_OUTPUT
              echo "‚úÖ No changes required"
              ;;
            1)
              echo "‚ùå Terraform plan failed"
              exit 1
              ;;
            2)
              echo "plan_result=changes-planned" >> $GITHUB_OUTPUT
              echo "‚úÖ Changes planned successfully"
              ;;
            *)
              echo "‚ùå Unexpected exit code: $EXIT_CODE"
              exit 1
              ;;
          esac

      - name: Apply Terraform Configuration
        if: github.event.inputs.dry_run == 'false' && steps.plan.outputs.plan_result == 'changes-planned'
        run: |
          cd deployment/policies

          echo "üöÄ Applying deployment..."
          terraform apply deployment.tfplan

          echo "‚úÖ Deployment completed successfully"

      - name: Generate Deployment Summary
        if: always()
        run: |
          # shellcheck disable=SC2086,SC2129
          cd deployment/policies

          {
            echo "## üöÄ Deployment Summary"
            echo ""
            echo "- **Package Version**: ${{ github.event.inputs.version }}"
            echo "- **Resource Group**: ${{ github.event.inputs.resource_group }}"
            echo "- **Subscription**: ${{ github.event.inputs.subscription_id }}"
            echo "- **Environment**: ${{ github.event.inputs.environment }}"
            echo "- **Policy Effect**: ${{ github.event.inputs.policy_effect }}"
            echo "- **Dry Run**: ${{ github.event.inputs.dry_run }}"
            echo "- **Deployment Name**: ${{ needs.validate-inputs.outputs.deployment_name }}"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "### üîç Dry Run Results" >> $GITHUB_STEP_SUMMARY
            echo "This was a planning-only run. No resources were modified." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.plan.outputs.plan_result }}" == "no-changes" ]; then
            echo "### ‚úÖ No Changes Required" >> $GITHUB_STEP_SUMMARY
            echo "All policies are already deployed and up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö° Policies Deployed" >> $GITHUB_STEP_SUMMARY
            if [ -f terraform.tfstate ]; then
              terraform output -json > outputs.json 2>/dev/null || echo "{}" > outputs.json

              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              cat outputs.json >> $GITHUB_STEP_SUMMARY || echo "No outputs available" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload Terraform State (if changes applied)
        if: github.event.inputs.dry_run == 'false' && steps.plan.outputs.plan_result == 'changes-planned'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ needs.validate-inputs.outputs.deployment_name }}
          path: deployment/policies/terraform.tfstate
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Clean up sensitive files
          rm -f deployment/policies/terraform.tfvars
          rm -f deployment/policies/deployment.tfplan
          echo "‚úÖ Cleanup completed"
