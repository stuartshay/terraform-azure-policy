name: CI

on:
  push:
    branches: [develop, master]
  pull_request:
    branches: [develop, master]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Install pre-commit dependencies
        run: |
          # Update package lists
          sudo apt-get update

          # Install basic tools that might be needed
          sudo apt-get install -y jq curl wget

      - name: Install terraform-docs
        continue-on-error: true
        run: |
          echo "Installing terraform-docs..."
          TERRAFORM_DOCS_VERSION="0.20.0"
          wget -q -O terraform-docs.tar.gz "https://github.com/terraform-docs/terraform-docs/releases/download/v${TERRAFORM_DOCS_VERSION}/terraform-docs-v${TERRAFORM_DOCS_VERSION}-linux-amd64.tar.gz"
          tar -xzf terraform-docs.tar.gz terraform-docs
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/terraform-docs
          echo "✓ terraform-docs v${TERRAFORM_DOCS_VERSION} installed"

      - name: Install actionlint
        continue-on-error: true
        run: |
          echo "Installing actionlint..."
          ACTIONLINT_VERSION="1.7.7"
          wget -q -O actionlint.tar.gz "https://github.com/rhysd/actionlint/releases/download/v${ACTIONLINT_VERSION}/actionlint_${ACTIONLINT_VERSION}_linux_amd64.tar.gz"
          tar -xzf actionlint.tar.gz actionlint
          chmod +x actionlint
          sudo mv actionlint /usr/local/bin/actionlint
          echo "✓ actionlint installed"

      - name: Verify tools installation
        run: |
          echo "Verifying installed tools..."
          echo "Python: $(python --version)"
          echo "Terraform: $(terraform --version | head -1)"

          if command -v terraform-docs >/dev/null 2>&1; then
            echo "✓ terraform-docs: $(terraform-docs --version)"
          else
            echo "⚠ terraform-docs not available"
          fi

          if command -v actionlint >/dev/null 2>&1; then
            echo "✓ actionlint: $(actionlint -version 2>/dev/null || actionlint --version 2>/dev/null || echo 'version unknown')"
          else
            echo "⚠ actionlint not available"
          fi

      - name: Determine hooks to skip
        id: skip-hooks
        run: |
          SKIP_HOOKS="powershell-syntax-check,powershell-whitespace-cleanup,powershell-script-analyzer,pester-tests-quick,terraform_tflint,commitizen"

          # Add terraform_docs to skip list if not available
          if ! command -v terraform-docs >/dev/null 2>&1; then
            SKIP_HOOKS="${SKIP_HOOKS},terraform_docs"
          fi

          # Add actionlint to skip list if not available
          if ! command -v actionlint >/dev/null 2>&1; then
            SKIP_HOOKS="${SKIP_HOOKS},actionlint"
          fi

          echo "SKIP_HOOKS=${SKIP_HOOKS}" >> "$GITHUB_OUTPUT"
          echo "Will skip hooks: ${SKIP_HOOKS}"

      - name: Setup PowerShell
        uses: microsoft/setup-powershell@v1
        with:
          pwsh: true

      - name: Install PowerShell modules for testing
        run: |
          pwsh -Command "
            Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.4.0
            Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
            Write-Host 'PowerShell modules installed successfully'
          "

      - name: Run unit tests with code coverage
        run: | # pragma: allowlist secret
          pwsh -ExecutionPolicy Bypass -Command "
            # Run fast tests that don't require Azure authentication
            Import-Module Pester

            \$config = [PesterConfiguration]@{
              Run = @{
                Path = @(
                  'tests/storage/Quick-PolicyValidation.Tests.ps1',
                  'tests/storage/Quick-SoftDeletePolicyValidation.Tests.ps1',
                  'tests/network'
                )
                PassThru = \$true
              }
              Output = @{
                Verbosity = 'Detailed'
              }
              TestResult = @{
                Enabled = \$true
                OutputFormat = 'JUnitXml'
                OutputPath = 'reports/TestResults.xml'
              }
              CodeCoverage = @{
                Enabled = \$true
                OutputFormat = 'JaCoCo'
                OutputPath = 'reports/coverage.xml'
                Path = @(
                  'scripts/*.ps1',
                  'PowerShell/*.ps1'
                )
                ExcludeTests = \$true
                CoveragePercentTarget = 70.0
              }
            }

            \$results = Invoke-Pester -Configuration \$config

            Write-Host 'Test Results:'
            Write-Host \"  Total: \$( \$results.TotalCount )\"
            Write-Host \"  Passed: \$( \$results.PassedCount )\"
            Write-Host \"  Failed: \$( \$results.FailedCount )\"

            if (\$results.CodeCoverage) {
              Write-Host 'Coverage Results:'
              Write-Host \"  Percentage: \$( [math]::Round(\$results.CodeCoverage.CoveragePercent, 2) )%\"
              Write-Host \"  Commands Analyzed: \$( \$results.CodeCoverage.CommandsAnalyzedCount )\"
              Write-Host \"  Commands Executed: \$( \$results.CodeCoverage.CommandsExecutedCount )\"
            }

            if (\$results.FailedCount -gt 0) {
              Write-Error 'One or more tests failed'
              exit 1
            }
          "

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            reports/TestResults.xml
            reports/coverage.xml

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: reports/TestResults.xml
          reporter: java-junit

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        env:
          SKIP: ${{ steps.skip-hooks.outputs.SKIP_HOOKS }}
          PRE_COMMIT_HOME: ~/.cache/pre-commit
