# Pre-commit hooks configuration for Azure Policy Testing project
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Basic file checks
      - id: trailing-whitespace
        args: ['--markdown-linebreak-ext=md']
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: detect-private-key

      # Line ending consistency
      - id: mixed-line-ending
        args: ['--fix=lf']
        exclude: '\.(ps1|psm1|psd1)$'

      # Terraform specific
      - id: check-yaml
        files: '\.ya?ml$'

      # JSON formatting (for policy files)
      - id: pretty-format-json
        args: ['--autofix', '--indent=2']
        files: 'policies/.*/rule\.json$'

  # PowerShell linting and formatting
  - repo: local
    hooks:
      - id: powershell-syntax-check
        name: PowerShell Syntax Check
        entry: bash
        args:
          [
            '-c',
            'if command -v pwsh >/dev/null 2>&1; then pwsh -Command "try { Get-ChildItem -Path . -Filter \"*.ps1\" -Recurse | ForEach-Object { \$null = [System.Management.Automation.PSParser]::Tokenize((Get-Content \$_.FullName -Raw), [ref]\$null) }; Write-Host \"PowerShell syntax check passed\" } catch { Write-Host \"PowerShell syntax check failed: \$_\"; exit 1 }"; else echo "PowerShell not available, skipping syntax check"; fi',
          ]
        language: system
        files: '\.ps1$'
        pass_filenames: false
        description: 'Check PowerShell files for syntax errors'

      - id: powershell-whitespace-cleanup
        name: PowerShell Whitespace Cleanup
        entry: pwsh
        args:
          [
            '-Command',
            'Get-ChildItem -Path . -Filter "*.ps*" -Recurse | Where-Object { $_.Name -match "\\.(ps1|psd1)$" } | ForEach-Object { try { $content = Get-Content $_.FullName -Raw -Encoding UTF8; if ($content) { $cleaned = $content -creplace "\\s*=\\s*", " = " -creplace "\\s*\\+\\s*", " + " -creplace "\\s*-\\s*", " - " -creplace "\\s*\\*\\s*", " * " -creplace "\\s*/\\s*", " / "; $lines = $cleaned -split "\\r?\\n"; $trimmed = $lines | ForEach-Object { $_.TrimEnd() }; $final = ($trimmed -join "`n").TrimEnd() + "`n"; if ($content -ne $final) { Write-Host "Cleaning whitespace in $($_.Name)"; [System.IO.File]::WriteAllText($_.FullName, $final, [System.Text.UTF8Encoding]::new($true)) } } } catch { Write-Host "Error cleaning $($_.Name): $_" } }',
          ]
        language: system
        files: '\.ps(1|d1)$'
        pass_filenames: false
        description: 'Clean PowerShell files whitespace and add proper spacing'

      - id: powershell-script-analyzer
        name: PowerShell Script Analyzer
        entry: pwsh
        args:
          [
            '-Command',
            'try { if (Get-Module -ListAvailable -Name PSScriptAnalyzer) { $results = Invoke-ScriptAnalyzer -Path . -Settings ".vscode/PSScriptAnalyzerSettings.psd1" -Recurse -Severity Error,Warning -ExcludeRule PSUseConsistentWhitespace,PSUseBOMForUnicodeEncodedFile,PSAvoidUsingPositionalParameters,PSReviewUnusedParameter,PSUseDeclaredVarsMoreThanAssignments,PSAvoidUsingConvertToSecureStringWithPlainText; if ($results) { $results | Format-Table -AutoSize; exit 1 } else { Write-Host "PSScriptAnalyzer passed (critical issues only)" } } else { Write-Host "PSScriptAnalyzer not installed, skipping..." } } catch { Write-Host "PSScriptAnalyzer error: $_" }',
          ]
        language: system
        files: '\.ps1$'
        pass_filenames: false
        description: 'Run PSScriptAnalyzer on PowerShell files (critical issues only)'

      - id: pester-tests-unit
        name: Run Pester Unit Tests
        entry: pwsh
        args:
          [
            '-Command',
            'if (Get-Module -ListAvailable -Name Pester) { $unitTests = Get-ChildItem -Path "tests" -Filter "*Unit*.Tests.ps1" -Recurse; if ($unitTests) { Invoke-Pester -Path $unitTests.FullName -CI } else { Write-Host "No unit tests found, skipping..." } } else { Write-Host "Pester not installed, skipping tests..." }',
          ]
        language: system
        files: '(\.ps1|policies/.*/rule\.json)$'
        pass_filenames: false
        description: 'Run all unit tests (tests with Unit in filename)'

  # Terraform formatting and validation
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.101.0
    hooks:
      - id: terraform_fmt
        args:
          - --args=-recursive
          - --args=-diff
      - id: terraform_validate
        args:
          - --args=-json
      - id: terraform_docs
        args:
          - --hook-config=--path-to-file=README.md
          - --hook-config=--add-to-existing-file=true
          - --hook-config=--create-file-if-not-exist=true
      - id: terraform_tflint
        exclude: '^(policies/(storage|network|function-app)/.+/|initiatives/)'
        args:
          - --args=--only=terraform_deprecated_interpolation
          - --args=--only=terraform_deprecated_index
          - --args=--only=terraform_unused_declarations
          - --args=--only=terraform_comment_syntax
          - --args=--only=terraform_documented_outputs
          - --args=--only=terraform_documented_variables
          - --args=--only=terraform_typed_variables
          - --args=--only=terraform_module_pinned_source
          - --args=--only=terraform_naming_convention
          - --args=--only=terraform_required_version
          - --args=--only=terraform_required_providers
          - --args=--only=terraform_standard_module_structure
          - --args=--only=terraform_workspace_remote

  # Markdown linting and formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        name: Markdown Lint
        args: ['--fix', '--config', '.markdownlint.json']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.37.1
    hooks:
      - id: yamllint
        args: ['-d', 'relaxed']

  # GitHub Actions linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      - id: actionlint
        args:
          - '-shellcheck='
          - '-config-file'
          - 'actionlint.yaml'

  # Security scanning
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args:
          [
            '--baseline',
            '.secrets.baseline',
            '--base64-limit',
            '4.5',
            '--hex-limit',
            '3.0',
          ]
        exclude: 'package.lock.json|\.github/workflows/.*\.yml'

  # Git commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.9.1
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Azure Policy specific validations
  - repo: local
    hooks:
      - id: azure-policy-validation
        name: Azure Policy JSON Validation
        entry: bash
        args:
          [
            '-c',
            'if command -v pwsh >/dev/null 2>&1; then pwsh -Command "Get-ChildItem -Path \"policies\" -Filter \"rule.json\" -Recurse | ForEach-Object { try { \$policy = Get-Content \$_.FullName -Raw | ConvertFrom-Json; if (-not \$policy.properties) { throw \"Missing properties section\" }; if (-not \$policy.properties.policyRule) { throw \"Missing policyRule\" }; Write-Host \"✓ \$(\$_.Name) is valid\" } catch { Write-Error \"✗ \$(\$_.Name): \$_\"; exit 1 } }"; else echo "PowerShell not available, using basic JSON validation"; find policies -name "rule.json" -exec python -m json.tool {} \\; > /dev/null && echo "✓ All policy JSON files are valid"; fi',
          ]
        language: system
        files: 'policies/.*/rule\.json$'
        pass_filenames: false
        description: 'Validate Azure Policy JSON structure'

      - id: terraform-policy-syntax
        name: Terraform Policy Configuration Check
        entry: pwsh
        args:
          [
            '-Command',
            'Get-ChildItem -Path "terraform" -Filter "*.tf" -Recurse | ForEach-Object { $content = Get-Content $_.FullName -Raw; if ($content -match "azurerm_policy" -and $content -notmatch "policy_definition_id") { Write-Error "Policy resource missing policy_definition_id in $($_.Name)"; exit 1 } }',
          ]
        language: system
        files: 'terraform/.*\.tf$'
        pass_filenames: false
        description: 'Check Terraform policy configurations'

  # File size and structure checks
  - repo: local
    hooks:
      - id: check-large-policy-files
        name: Check Policy File Size
        entry: bash
        args:
          [
            '-c',
            'large_files=$(find policies -name "*.json" -size +50k); if [ -n "$large_files" ]; then echo "Policy files too large (>50KB):"; echo "$large_files"; exit 1; else echo "✓ All policy files are within size limit"; fi',
          ]
        language: system
        files: 'policies/.*/rule\.json$'
        pass_filenames: false
        description: 'Ensure policy files are not too large'

      - id: check-test-file-naming
        name: Check Test File Naming Convention
        entry: bash
        args:
          [
            '-c',
            'for file in tests/**/*.ps1; do if [[ $(basename "$file") != *".Tests.ps1" ]] && [[ $(basename "$file") != "PolicyTestConfig.ps1" ]]; then echo "Test file $file should end with .Tests.ps1"; exit 1; fi; done',
          ]
        language: system
        files: 'tests/.*\.ps1$'
        pass_filenames: false
        description: 'Ensure test files follow naming convention'

# Global configuration
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [
      powershell-syntax-check,
      powershell-whitespace-cleanup,
      powershell-script-analyzer,
      pester-tests-unit,
      terraform_tflint,
      commitizen,
    ] # Skip resource-intensive hooks in CI
  submodules: false
